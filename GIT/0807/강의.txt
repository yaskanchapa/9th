형상관리툴 = 분산형 관리툴


<설명 할줄 알것>
포크 따서 방아서 커밋해서 풀까지 다해봤습니다.라고
깃이 무엇이고 난 어떻게 사용해왔다 
전 깃 사용법을 알고 있습니다. 
컴밋을 하고 이렇게 푸쉬를 해서 이렇게 사용할 줄 안는데
설명 중 포크? 토크 란 기능 설명이 면접에 포인트


<수업 간단 테스트>
간단한 깃 명령어 테스트

<수업 내용>
SVN은 깃이전에 쓰던것
제가 깃만 써봐서 그러지마 깃 사용 법을 알고 있기때문에
충분히 따라 갈 수 있습니다. 

깃은 소프트웨어
깃허브는 깃을 통해 저장하는 가상저장공간

즉 깃허브에 저장 해두었다



즉 조립을 하는 장소



CLI GUI 
CLI는 도스 같이 운영하는 방식
GUI는 윈도우 방식

GIT은 CLI방식을 사용한다.

깃 컴밋하고 푸쉬하는 명령어 암기 할 것!

git --version

1. 작업 폴더와 깃 연동시키기

폴더에서 주소에 cmd 치면 해당 폴더로 cmd 열림

cmd 후 git init 입력
깃에 이폴더와 연동시킴


원격저장소에서 당운 받아오기 
git clone
git pull

git add 파일 새성 인덱스에 저장
git commit 로컬저장소에 컴밋
git push 원격저장소에 올리기

깃 허브 - 원격저장소
내 피씨 - 로컬저장소
임시 저장 공간이 따로 또 있음 - 인덱스
내가 작업하는 저장소 - 작업저장소

원격저장소에서 다운받음녀 로컬저장소에 저장이됨
작업 저장소에서 작업 한후 로컬 저장소에 올려두고 최종적으로
원격저장소에 올리는 방식

git config --list로 유저명 메일명 등 확인
git config --global user.name "CCPAPA"
git config --global user.email "yaskanchapa@yahoo.co.jp"

로컬 저장소와 원격 저장소 연결 시키기
깃 헙에서 주소 복사 한 후
git remote add origin 주소

연결 확인
git remote -v

변경 내용 확인 커멘드
git status 
빨간색 - 로컬저장소와 작업저장소 일치 안하는 부분
초록색 - 로컬저장소와 작업저장소 파일 동일

작업저장소 -> 인덱스에 올림
git add *
git add 파일 명

작업저장소 -> 로컬저장소
git commit -m "0807Test"
-m 뭘 수정했는지 등을 알기 쉽게 요약한 메모

현장에서 일잘하는 건 사람들끼리 협업 가능하기 쉽게 일 정리 
잘하고 스케줄 관리 잘하는 사람이 평가 되기 쉽다.

로컬저장소 -> 원격저장소
git push origin master

중요 내가 어디다 저장해야되는지 저장 장소를 착각할 수 있기에조심
git remote -v
이걸로 원격저장소 주소 확인
git remote rm origin
으로 원격저장소 리스트 삭제 후 다시
git remote add origin 주소
로 원격 저장소 재 추가


branch란게 있다.
가지치기
그래서 세분화해서 관리 하는것 마인드맵 형식이랑 비슷
그래서 조립부품을 세분화 시켜서 서로 타 부품끼리 충돌나는걸
방지하기위한 목적

보통은 그래서 깃헙에서
자신이 담당하게될 부분(브런치)안에서 작업하게 될 것이다.

그후 마지라고 조립을 조립하는 작업할 것이다.

토크란걸 따와서 토크에서 제 담당에 맞는 것에서 피처로그인브런치
생성후 제 토크에 올린후 원본올린후 결합해서 올린다.

마스터 쪽이 최종권한을 의미
그러니 기본적으론 자신의 브런치안에서 작어을 하게 된다.

브런치 작성법 확인 필요.

상대방 깃 헙에서 다운 방법

작업 폴더 지정하기!
git init 
그럼 이제 이폴더로 다운 됨

git remote add origin 주소
이걸로 상대 주소 클론 땀

방법1
git remote update
git checkout 브런치명


git remote update
를 통해 보기 실행 dir같은 느낌

git branch -a
로 브런치 구체적 내용 확인

빨강 - 아직 반영 안된것들

git checkout 브런치이름
으로 브런치를 반영시킴

git status
이걸로 내가 현재 어떤 브런치 사용중인지 확인 가능

브런치 변경
git checkout 브런치명

이렇게 브런치 지정하고 나면 내 작업공간에 바로 다이렉트로 반영이된다. 

브런치 변경시 해당 브런치가 바로 반영되기에 조심 할 것.

예) 작업해두고 컴밋 안하고 브런치 다른걸로 하면 다 날라감 

방법2 이방식이 많이 사용됨 
그리고 패치를 통해 확인하는 것도 좋지만 풀로 바로 확인 없이
가져오는 방식도 많이 사용됨

git fetch
git pull origin 브런치명



git fetch
이것도 git remote update처럼 보기만 하는 기능

그러면 각종 브런치들이 보여질 것임

브런치 선택
git pull origin 브런치명

어디 까지 써봤냐

포크 따와서 거기서 내가 원하는 브런치 보고
깃 패치에서 확인후 
깃 풀 오리진 브런치명을 통해 받아 작업했다.

마스터는 절대 손 대지 말것
기본적으론 디벨롭 자신의 브런치 정도일 것임

한번 이닛 해두면 그후 폴더 이동시키든 폴더명 변경하든 
다시 이닛 안해둬도 됨

정리

1. 이닛하기
git init
2. 내가 담당할 브런치를 확인 후 만들기
3. 주소 따오기 클론 따오기
git remote add origin 주소
4. 연결 주소 확인
git remote -v

5. 
방법1
   git remote update 
   git checkout 브런치명

   git fetch
   git pull origin 브런치명

-----------작업 준비 완료 ------------
6. git add
   git commit -m ""
   git push
로 올리기


면접 포인트
깃 헙에서 포크를 따서 ----이렇게 했다. 
그리고 GUI를 사용해서도 사용해 본 적이 있다.
라고 말하는 것도 포인트


desktopgithum.com

여기서 폴더 만들고 뭐하는 것은 다 로컬에만 반영됨
그후 원겨저장소에 올리는것.


<내일 수업 내용 간략>
포크 ; 복사란 의미. 복사본 내 로컬에 따오는것 = 포크 딴것
즉 포크 따서 하는 작업하는 것은
원본에다가도 반영을 시켜줘야할 것에 주의해야한다.








