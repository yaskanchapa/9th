스위치 구문 형태
switch(비교대상){
  case대상:
     return 리턴값;
  case대상:
     return 리턴값;
  case대상:
     return 리턴값;
  default:
     return null;
}


문자열 비교구문시 사용하는 함수
대상.equals()


null 처리 하는것.

null일 경우 어떻게 처리하라는 것도 지정해줘야함
(null일경우 어떻게 해라 가 아니라
null아닌건 이렇게 하고 그 외는 어떻게 해라라고 처리)

스태틱 쓰면 메모리를 쓸때 없이 항상 먹기 때문에

클래스를 객체화 시켜서 static은 사용 안하는게 좋다.
그렇게 되면 필요 할 때만 메모리에 끌어와 쓰기 때문에 효율적

클래스 객체화 후에는 해당 클래스의 함수 가져올 때는
클래스명.함수() 식으로 사용한다.

접근 제어자
외부 접근 제어
public 같은 프로젝트에선 사용 가능

protected 동일 패키지안의 클래스
또한 해당 클래스 상속받은 외부 패키지 클래스도 접근 가능

default 해당 패키지 안에서만 (아무접근 제어자도 없다면 디폴트란 의미)

private 해당 클래스 내부에서만 사용

Method_9 참고
타 클래스 데이터 가져와 사용하기 참고
클래스 객체화를 하고
객체화명.해당데이터(); 등으로 사용
데이터 가져올 시 해당 데이터의 접근제어가도 확인할 것

