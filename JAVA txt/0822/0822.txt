<<배열과 리스트 맵>>
●배열
배열 사용 이유: 
객체를 하나씩 변수에 담기에는 손이 많이감
한곳에 몰아 담아서 옮기기

배열은 배열

배열의 기본 형태:
타입 객체명 = new 타입[배열크기];
객체명[0] = "고길동";
...

길이 구하기:
객체명.length

★컬렉션에 리스트와 맵이 있다.

배열은 매번 구문의 길이를 선언해줘야 하기에 수정이 복잡
그래서 자동으로 구문 길이 잡아주는 리스트와 맵을 사용하게 됨
맵은 리스트보다 다루기가 더 편함.

컬렉션은 써보셔나요?
->리스트와 맵을 사용해보았고 리스트에서는 어레이리스트 맵에선 허쉬맵을
사용해보았습니다.

●리스트
import가 필요!

리스트 기본 형태:
List<wrapperclass타입> 객체명 = new ArrayList<wrrapperclass>();

값 넣기:
객체명.add("0번 아이템");

값 빼기:
객체명.get();

길이 구하기:
객체명.size();

확장 for문
for(변수타입 변수명:리스트객체명){
실행구문
}
변수타입 넣을 때 값타입에 맞춰야함

wrapperclass:
Integer <= int 상위 버전(객체화 시킨거)
Boolean <= boolean 상위 버전(객체화 시킨거)
String은 자체가 객체임

●맵
리스트는 인덱스에 순서대로 무작위로 담김
맵은 담는 곳에 라벨을 붙여 둔다는 의미로 생각하면 좋음(키값)

맵 기본 형태:
Map<키용 타입,데이터값 타입> hashMap = new HashMap<키용 타입,데이터값 타입>();

값 넣기:
객체명.put(키이름,내용)

값 빼기:
객체명.get(키이름)

그래서 키안에 값을 넣어두는 건데 키안에 값으로 맵이나 리스트를 넣을 수도 있다.

확장for문 (순서개념이 없기 때문에 일반for문은 사용 못함)

for(String secondName:secondNameMap.keySet()) {
    System.out.println(secondNameMap.get(secondName));
}

조건에서 secondName에 secondNameMap.keySet()을 함으로써
secondName이란 변수에 키값이 들어가고 get으로 키값을 꺼내면 해당 값이
나오게 된다.

★★★AJAX란?
우리가 요청해서 데이터를 가져오는 것
이 데이터의 형태가 가지치기가 된 json 즉 맵과 비슷한 형태가 되어있다.

●팁
글자 더블클릭 후 컨트롤 F 하면 해당 문자 검색 수정 가능

